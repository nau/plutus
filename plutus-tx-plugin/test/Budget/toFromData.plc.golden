let data Bool | Bool_match where
      True : Bool
      False : Bool
    !unitval : unit = ()
    !fToDataBool_ctoBuiltinData : Bool -> data
      = \(ds : Bool) ->
          Bool_match
            ds {all dead. data} (/\dead -> constrData 1 (mkNilData unitval))
            (/\dead -> constrData 0 (mkNilData unitval)) {all dead. dead}
    data Unit | Unit_match where
      Unit : Unit
    !reconstructCaseError : string = "PT1"
    !fUnsafeFromDataBool_cunsafeFromBuiltinData : data -> Bool
      = \(d : data) ->
          let !tup : pair integer (list data) = unConstrData d
              !index : integer = fstPair {integer} {list data} tup
          in ifThenElse
               {unit -> Bool} (equalsInteger index 1) (\(ds : unit) -> True)
               (\(ds : unit) ->
                  ifThenElse
                    {unit -> Bool} (equalsInteger index 0) (\(ds : unit) ->
                                                              False)
                    (\(ds : unit) ->
                       let !thunk : unit
                             = let !wild : Unit
                                     = trace {Unit} reconstructCaseError Unit
                               in unitval
                       in error {Bool}) unitval) unitval
    data (Tuple3 :: * -> * -> * -> *) a b c | Tuple3_match where
      Tuple3 : a -> b -> c -> Tuple3 a b c
    data (Either :: * -> * -> *) a b | Either_match where
      Left : a -> Either a b
      Right : b -> Either a b
    data (Maybe :: * -> *) a | Maybe_match where
      Just : a -> Maybe a
      Nothing : Maybe a
in (let b = Maybe (Tuple3 Bool integer Bool)
    in \(dUnsafeFromData : (\a -> data -> a) integer) (dUnsafeFromData
        : (\a -> data -> a) b) (d : data) ->
         let !tup : pair integer (list data) = unConstrData d
             !index : integer = fstPair {integer} {list data} tup
         in ifThenElse
              {unit -> Either integer b} (equalsInteger index 1)
              (\(ds : unit) ->
                 let !arg : data
                       = headList {data} (sndPair {integer} {list data} tup)
                 in Right {integer} {b} (dUnsafeFromData arg))
              (\(ds : unit) ->
                 ifThenElse
                   {unit -> Either integer b} (equalsInteger index 0)
                   (\(ds : unit) ->
                      let !arg : data
                            = headList
                                {data} (sndPair {integer} {list data} tup)
                      in Left {integer} {b} (dUnsafeFromData arg))
                   (\(ds : unit) ->
                      let !thunk : unit
                            = let !wild : Unit
                                    = trace {Unit} reconstructCaseError Unit
                              in unitval
                      in error {Either integer b}) unitval) unitval)
     unIData ((let a = Tuple3 Bool integer Bool
               in \(dUnsafeFromData : (\a -> data -> a) a) (d : data) ->
                    let !tup : pair integer (list data) = unConstrData d
                        !index : integer = fstPair {integer} {list data} tup
                    in ifThenElse
                         {unit -> Maybe a} (equalsInteger index 0)
                         (\(ds : unit) ->
                            let !arg : data
                                  = headList
                                      {data} (sndPair {integer} {list data} tup)
                            in Just {a} (dUnsafeFromData arg))
                         (\(ds : unit) ->
                            ifThenElse
                              {unit -> Maybe a} (equalsInteger index 1)
                              (\(ds : unit) -> Nothing {a})
                              (\(ds : unit) ->
                                 let !thunk : unit
                                       = let !wild : Unit
                                               = trace
                                                   {Unit} reconstructCaseError
                                                   Unit
                                         in unitval
                                 in error {Maybe a}) unitval) unitval)
                (\(d : data) ->
                   let !tup : pair integer (list data) = unConstrData d
                       ~t : list data = sndPair {integer} {list data} tup
                       ~t : list data = tailList {data} t
                       !index : integer = fstPair {integer} {list data} tup
                   in ifThenElse
                        {unit -> Tuple3 Bool integer Bool} (equalsInteger
                                                              index 0)
                        (\(ds : unit) ->
                           let !arg : data = headList {data} t
                               !arg : data = headList {data} t
                               !arg : data = headList {data} (tailList {data} t)
                           in Tuple3
                                {Bool} {integer} {Bool}
                                (fUnsafeFromDataBool_cunsafeFromBuiltinData arg)
                                (unIData arg)
                                (fUnsafeFromDataBool_cunsafeFromBuiltinData
                                   arg))
                        (\(ds : unit) ->
                           let !thunk : unit
                                 = let !wild : Unit
                                         = trace
                                             {Unit} reconstructCaseError Unit
                                   in unitval
                           in error {Tuple3 Bool integer Bool}) unitval))
     (constrData
        1 (mkCons
             {data} ((let a = Tuple3 Bool integer Bool
                      in \(dToData : (\a -> a -> data) a) (ds : Maybe a) ->
                           Maybe_match
                             {a} ds {all dead. data} (\(arg : a) ->
                                                        /\dead ->
                                                          constrData
                                                            0 (mkCons
                                                                 {data} (dToData
                                                                           arg)
                                                                 (mkNilData
                                                                    unitval)))
                             (/\dead -> constrData 1 (mkNilData unitval))
                             {all dead. dead})
                       (\(w : Tuple3 Bool integer Bool) ->
                          Tuple3_match
                            {Bool} {integer} {Bool} w {data}
                            (\(ww : Bool) (ww : integer) (ww : Bool) ->
                               constrData
                                 0 (mkCons
                                      {data} (fToDataBool_ctoBuiltinData ww)
                                      (mkCons
                                         {data} (iData ww)
                                         (mkCons
                                            {data} (fToDataBool_ctoBuiltinData
                                                      ww) (mkNilData
                                                             unitval))))))
                       (Just
                          {Tuple3 Bool integer Bool} (Tuple3
                                                        {Bool} {integer} {Bool}
                                                        True 1 False)))
             (mkNilData unitval)))