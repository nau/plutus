letrec data (List :: * -> *) a | Nil_match where
         Nil : List a
         Cons : a -> List a -> List a
in
letrec !go : List integer -> integer
         = \(ds : List integer) ->
             Nil_match
               {integer} ds {all dead. integer} (/\dead -> 0)
               (\(x : integer) (xs : List integer) ->
                  /\dead -> addInteger x (go xs)) {all dead. dead}
in go
     ((let a = List integer in \(c : integer -> a -> a) (n : a) ->
                                 c
                                   1 (c
                                        2 (c
                                             3 (c
                                                  4
                                                  (c
                                                     5
                                                     (c
                                                        6
                                                        (c
                                                           7
                                                           (c
                                                              8
                                                              (c
                                                                 9
                                                                 (c
                                                                    10
                                                                    n))))))))))
        (\(ds : integer) (ds : List integer) -> Cons {integer} ds ds)
        (Nil {integer}))